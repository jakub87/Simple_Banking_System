type: edu
custom_name: stage4
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    import org.sqlite.SQLiteDataSource;

    import java.sql.Connection;
    import java.sql.DatabaseMetaData;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) throws SQLException {
            String DBName = args[1];

            DataBaseManager dataBaseManager = new DataBaseManager(DBName);

            Scanner scanner = new Scanner(System.in);
            int mainMenuSelect;

            do {
                Menu.main();
                mainMenuSelect = Integer.parseInt(scanner.nextLine());
                if (mainMenuSelect == 1) {
                    dataBaseManager.addCreditCard();
                } else if (mainMenuSelect == 2) {
                    System.out.println("Enter your card number:");
                    String cardNumber = scanner.nextLine();
                    System.out.println("Enter your PIN:");
                    String pin = scanner.nextLine();
                    if (dataBaseManager.logVerification(cardNumber,pin)) {
                        System.out.println("You have successfully logged in!");
                        boolean logged = true;
                        do {
                            Menu.logged();
                            int userSelect = scanner.nextInt();
                            if (userSelect == 1) {
                                System.out.println("Balance: 0");
                            } else if (userSelect == 2 ) {
                                logged = false;
                                System.out.println("You have successfully logged out!");
                            } else if (userSelect == 0) {
                                    logged = false;
                                    mainMenuSelect = 0;
                            }
                        } while(logged);
                        //System.out.println("You have successfully logged out!");
                    } else {
                        System.out.println("Wrong card number or PIN!");
                    }
                }
            }while(mainMenuSelect != 0);
            System.out.println("Bye!");
            dataBaseManager.ending();
        }
    }
  learner_created: false
- name: src/banking/DataBaseManager.java
  visible: true
  text: |
    package banking;

    import java.sql.*;

    public class DataBaseManager {
        private String URL = "jdbc:sqlite:";
        private Connection connection;
        private DatabaseMetaData meta;
        private PreparedStatement preparedStatement;
        private CreditCardManager creditCardManager;
        private String query;

        public DataBaseManager(String DataBaseName) {
            creditCardManager = new CreditCardManager();
            try {
                connection = DriverManager.getConnection(URL+DataBaseName);
                meta = connection.getMetaData();
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }

            initialize();
        }

        private void initialize() {
            query = "CREATE TABLE IF NOT EXISTS card(id INTEGER PRIMARY KEY, number TEXT, pin TEXT, balance INTEGER DEFAULT 0);";
            try {
                preparedStatement = connection.prepareStatement(query);
                preparedStatement.execute();
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }
        }

        public void addCreditCard() throws SQLException {
            CreditCard creditCard;
            ResultSet resultSet;

            do {
                creditCard = creditCardManager.getNewCreditCard();
                query = "SELECT * FROM card WHERE number = ?";
                preparedStatement = connection.prepareStatement(query);
                preparedStatement.setString(1, creditCard.getCreditCardNumber());
                resultSet = preparedStatement.executeQuery();
            }while (resultSet.next());

            query = "INSERT INTO card(number, pin) VALUES(?,?) ";
            preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, creditCard.getCreditCardNumber());
            preparedStatement.setString(2, creditCard.getPIN());
            preparedStatement.executeUpdate();
            System.out.println("Your card has been created\nYour card number:\n"+creditCard.getCreditCardNumber()+"\nYour card PIN:\n"+creditCard.getPIN());
        }

        public void ending() throws SQLException {
            preparedStatement.close();
            connection.close();
        }
        //    private SQLiteDataSource dataSource;
    //    private Connection connection;
    //    private Statement statement;
    //    private PreparedStatement preparedStatement;
    //    private String URL = "jdbc:sqlite:";
    //    private String query;
    //    private CreditCardManager creditCardManager;
    //
    //    public DataBaseManager(String dataBaseName) throws SQLException {
    //        URL += dataBaseName;
    //        dataSource = new SQLiteDataSource();
    //        dataSource.setUrl(URL+dataBaseName);
    //        creditCardManager = new CreditCardManager(); //operacje generowania pinu i numeru kart
    //        connection = dataSource.getConnection();
    //        init();
    //    }
    //
    //    private void init() throws SQLException {
    //        query = "CREATE TABLE IF NOT EXISTS card(id INTEGER PRIMARY KEY, number TEXT, pin TEXT, balance INTEGER DEFAULT 0);";
    ////        preparedStatement = connection.prepareStatement(query);
    //        preparedStatement.execute();
    //    }

    //    private void initializeCreateTable() throws SQLException {
    //        connection = DriverManager.getConnection(URL);
    //        DatabaseMetaData meta = connection.getMetaData();
    //        connection = dataSource.getConnection();
    //        statement = connection.createStatement();
    //        //String drop = "DROP TABLE card";
    //       // statement.executeUpdate(drop);
    //       // String creationTable = "CREATE TABLE card(id INTEGER PRIMARY KEY, number TEXT, pin TEXT, balance INTEGER DEFAULT 0);";
    //        String sql = "CREATE TABLE IF NOT EXISTS card (\n"
    //                + "     id INTEGER PRIMARY KEY,\n" // autimaticly create new id
    //                + "     number TEXT,\n"                       // don't write VARCHAR its mistake!
    //                + "     pin TEXT,\n"
    //                + "     balance INTEGER DEFAULT 0"
    //                + ");";
    //
    //        statement.executeUpdate(sql);
    //        statement.close();
    //    }

    //    public void addCreditCard() throws SQLException {
    //        CreditCard creditCard;
    //        String query;
    //        ResultSet resultSet;
    //
    //        do {
    //            creditCard = creditCardManager.getNewCreditCard();
    //            query = "SELECT * FROM card WHERE number = ?";
    //            preparedStatement = connection.prepareStatement(query);
    //            preparedStatement.setString(1, creditCard.getCreditCardNumber());
    //            resultSet = preparedStatement.executeQuery();
    //            preparedStatement.close();
    //        }while (resultSet.next());
    //
    //        query = "INSERT INTO card(number, pin) VALUES(?,?) ";
    //        preparedStatement = connection.prepareStatement(query);
    //        preparedStatement.setString(1, creditCard.getCreditCardNumber());
    //        preparedStatement.setString(2, creditCard.getPIN());
    //        preparedStatement.executeUpdate();
    //        preparedStatement.close();
    //        System.out.println("Your card has been created\nYour card number:\n"+creditCard.getCreditCardNumber()+"\nYour card PIN:\n"+creditCard.getPIN());
    //    }
    //
    //    public void clearTable() throws SQLException { //CLEARING
    //        String query = "DELETE FROM card";
    //        statement.executeUpdate(query);
    //        statement.close();
    //    }
    //
        public boolean logVerification(String cardNumber, String cardPin) throws SQLException {
            String query = "SELECT * FROM card WHERE number = ? AND pin = ?";
            preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, cardNumber);
            preparedStatement.setString(2, cardPin);
            ResultSet resultSet = preparedStatement.executeQuery();
            return resultSet.next();
        }
    //
    //    public void listedAllCards() throws SQLException {
    //        String query = "SELECT * from card";
    //        preparedStatement = connection.prepareStatement(query);
    //        ResultSet resultSet = preparedStatement.executeQuery();
    //        preparedStatement.close();
    //        while(resultSet.next()) {
    //            String number = resultSet.getString("number");
    //            String pin = resultSet.getString("pin");
    //            System.out.println("number: "+number+" pin: "+pin);
    //        }
    //    }
    //
    //    public void removeTable() throws SQLException {
    //        connection.createStatement().execute("DROP TABLE card;");
    ////        String query = "DROP TABLE card";
    ////        preparedStatement = connection.prepareStatement(query);
    ////        preparedStatement.execute();
    ////        query = "DROP DATABASE "+tmp;
    ////        preparedStatement = connection.prepareStatement(query);
    ////        preparedStatement.execute();
    //
    //       // preparedStatement.close();
    //        connection.close();
    //    }

            //ResultSet resultSet = statement.executeQuery(selectQuery);
    //        resultSet.next();
    //        int id = resultSet.getInt("id");
    //        String cardName = resultSet.getString("pin");
    //        System.out.println("Twoj pin to: "+cardName);
    //        System.out.println("ID to: "+id);


    }
  learner_created: false
- name: src/banking/CreditCardManager.java
  visible: true
  text: |
    package banking;

    public class CreditCardManager {
        private GenerateNumbers generateNumbers;

        public CreditCardManager() {
            generateNumbers = new GenerateNumbers();
        }

        private String generatePIN() {
            return generateNumbers.generate(4);
        }

        private String generateCardNumberLuhnAlgorithm() {
            StringBuilder generateCardNumber = new StringBuilder("0400000"+generateNumbers.generate(9));
            int sum = 0;
            for (int i = 1; i < generateCardNumber.length(); i++) {
                int tempDigit = Integer.parseInt(String.valueOf(generateCardNumber.charAt(i)));
                if (i % 2 != 0) {
                    tempDigit *= 2;
                }
                if (tempDigit > 9) {
                    tempDigit -= 9;
                }
                sum += tempDigit;
            }
            generateCardNumber.deleteCharAt(0);
            int lastDigit = (100 - sum) % 10;
            return String.valueOf(generateCardNumber.append(lastDigit));
        }

        public CreditCard getNewCreditCard() {
            return new CreditCard(generateCardNumberLuhnAlgorithm(),generatePIN());
        }

    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import banking.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTestingMethod
        CheckResult test1_checkDatabaseFile() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        closeConnection();
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                closeConnection();
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTestingMethod
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTestingMethod
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram(Main.class);
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTestingMethod
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTestingMethod
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        @BeforeClass
        public static void createTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        @AfterClass
        public static void deleteTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }
    }
  learner_created: false
- name: src/banking/Menu.java
  visible: true
  learner_created: true
- name: src/banking/GenerateNumbers.java
  visible: true
  learner_created: true
- name: src/banking/CreditCard.java
  visible: true
  learner_created: true
- name: card.s3db
  visible: true
  learner_created: true
- name: tempDatabase.s3db
  visible: true
  learner_created: true
- name: card.s3db-journal
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/518/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/93/stages/518/implement">JetBrains
    Academy</a>
  time: Wed, 16 Dec 2020 16:37:09 UTC
record: -1
